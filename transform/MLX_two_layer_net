# coding: utf-8
import sys, os
import mlx.core as mx
import mlx.nn as nn
import mlx.optimizers as opt
import numpy as np
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정



class TwoLayerNet:
    def __init__(self, input_size, hidden_size, output_size, weight_init_std=0.01):
        self.params = {}
        self.params['W1'] = weight_init_std * mx.random.uniform(0,1, shape=(input_size, hidden_size))   # numpy를 mlx.core로 교체, 표현법 차이 유의
        self.params['b1'] = mx.zeros(hidden_size)
        self.params['W2'] = weight_init_std * mx.random.uniform(0,1, shape=(hidden_size, output_size))
        self.params['b2'] = mx.zeros(output_size)

    def predict(self, x):
        W1, W2 = self.params['W1'], self.params['W2']
        b1, b2 = self.params['b1'], self.params['b2']
        a1 = mx.matmul(x, W1) + b1   # np.dot을 mx.matmul로 변경 시 결과 거의 유사함. 그러나 mx.matmul은 객체로 ndarray를 받을 수 없다. 따라서 데이터가 입력되기 전 mx.array(ndarray) 형태로 바꿔줘야 한다. 
        z1 = self.sigmoid(a1)
        a2 = mx.matmul(z1, W2) + b2
        y = self.softmax(a2)
        return y

    # x : 입력 데이터, t : 정답 레이블
    def loss(self, x, t):
        y = self.predict(x)
        return self.cross_entropy_error(y, t)

    def sigmoid(self, x):
        return 1 / (1 + mx.exp(-x))

    def softmax(self, x):
        if x.ndim == 2:
            x = x.T
            x = x - mx.max(x, axis=0)
            y = mx.exp(x) / mx.sum(mx.exp(x), axis=0)
            return y.T
        x = x - mx.max(x)  # 오버플로 대책
        return mx.exp(x) / mx.sum(mx.exp(x))

    def accuracy(self, x, t):
        y = self.predict(x)
        y = np.argmax(y, axis=1)
        t = np.argmax(t, axis=1)
        accuracy = np.sum(y == t) / float(x.shape[0])   # 굳이 변경할 필요 없는 부분은 일부 numpy로 남겨두었다
        return accuracy

    def cross_entropy_error(self, y, t):
        if y.ndim == 1:
            t = t.reshape(1, t.size)
            y = y.reshape(1, y.size)
        if t.size == y.size:
            t = t.argmax(axis=1)
        batch_size = y.shape[0]
        return -mx.sum(mx.log(y[mx.arange(batch_size), t] + 1e-7)) / batch_size

    def sigmoid_grad(self, x):
        return (1.0 - self.sigmoid(x)) * self.sigmoid(x)

    # x : 입력 데이터, t : 정답 레이블
    def numerical_gradient(self, x, t):
        loss_W = lambda W: self.loss(x, t)
        grads = {}
        grads['W1'] = numerical_gradient(loss_W, self.params['W1'])
        grads['b1'] = numerical_gradient(loss_W, self.params['b1'])
        grads['W2'] = numerical_gradient(loss_W, self.params['W2'])
        grads['b2'] = numerical_gradient(loss_W, self.params['b2'])
        return grads

    def gradient(self, x, t):
        W1, W2 = self.params['W1'], self.params['W2']
        b1, b2 = self.params['b1'], self.params['b2']
        grads = {}
        batch_num = x.shape[0]

        # forward
        a1 = mx.matmul(x, W1) + b1
        z1 = self.sigmoid(a1)
        a2 = mx.matmul(z1, W2) + b2
        y = self.softmax(a2)

        # backward
        dy = (y - t) / batch_num
        grads['W2'] = mx.matmul(z1.T, dy)
        grads['b2'] = mx.sum(dy, axis=0)
        da1 = mx.matmul(dy, W2.T)
        dz1 = self.sigmoid_grad(a1) * da1
        grads['W1'] = mx.matmul(x.T, dz1)
        grads['b1'] = mx.sum(dz1, axis=0)
        return grads

# 인스턴스 생성 테스트
net1 = TwoLayerNet(3, 3, 3)
net2 = TwoLayerNet(784, 50, 10)
aa = net2.predict(mx.arange(784))
print(aa)
